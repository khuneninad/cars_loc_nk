# -*- coding: utf-8 -*-
"""cars_loc_nk

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/cars-loc-nk-d58f227d-564b-42ce-890d-bf7a4e7aef10.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240317/auto/storage/goog4_request%26X-Goog-Date%3D20240317T083904Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D711725edcb74e659994b1debcdd991393d10052261275ac8fd7a8b291a673d93b7654fb54740091c3d12ca3e5aa327c4b70cd2ed9c2a433d054ac325f3efbf2452a8fd214cba94eeeef6a8b29dccfaf53ef7084347024aaf71ff7beb3e4c47017d84e2959362fb15d78ff748c12f0e8790e5a5b8c13f4473255db559e98ce6ed1e3e82a935e8504ad09e7c8ce481915c499934ca175838f627201c8c49440df10fdfb013d4b5819f590bf9368998a022339fa20e6331a080e6b2b910abf6f552f3681c6369ecae2a78d1ce688f82c45413719984f7a7912b192617639415bfd95503978f5a3661c6ebb3f3108f91ba771cf2aeb68dd56f514c07a7aca4e736de
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'cars-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F4579885%2F7817411%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240317%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240317T083903Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D35c43f8000d409c7e0a8e6d6f7810cbdcdd0ea1c5fdd027c4dd599a631d42c64fdcd182ea3a731acb8666dd6f8836c187c304f644a17fe4aa0c8214bc66f1ec4c25abf87b80e39eacf11e4f8961ccfb86ddf202ebdabc6c03c90b29db848b383a00415770650571f3bdaf84ebb1b6474a3cfa7401cd09f23af1517a3d15647ab0f4b3fe68cc6d0378160d0144ef352ea588a3932ad5f2b8ee48e4aa7472f9b155422b751eafdccee6847a34c9fd914331db3fd70ccb470f4f51919944e219c8558253f86b834cfaa760f9c203a446ae6eb6083bb9bec5c343a85916cab4a65290e68e683fd6744be46062407e630f6460e563ff774b8ddec8f43d5954c825fc7'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

df=pd.read_csv('/kaggle/input/cars-dataset/used_cars_data.csv')

def Location(query):
    query=query.title() #shows title of location or particular location
    df=pd.read_csv('/kaggle/input/cars-dataset/used_cars_data.csv')
    contain=df['Location'].str.contains(query) #Sorts list according to location query given
    return df[contain]

Location('Mumbai')

def fuel(query):
    query=query.title() #shows fuel type
    df=pd.read_csv('/kaggle/input/cars-dataset/used_cars_data.csv')
    contain=df['Fuel_Type'].str.contains(query) #shows list according to fuel type query given
    return df[contain]

fuel('Petrol')

#mode of transmission
def trans(query):
    query = query.title()
    df=pd.read_csv('/kaggle/input/cars-dataset/used_cars_data.csv')
    contain = df['Transmission'].str.contains(query)
    return df[contain]

trans('Manual')

